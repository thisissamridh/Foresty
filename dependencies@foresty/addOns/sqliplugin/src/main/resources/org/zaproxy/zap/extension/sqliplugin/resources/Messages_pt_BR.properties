
sqliplugin.ext.name = Inje\u00e7\u00e3o de SQL avan\u00e7ada
sqliplugin.ext.desc = Extens\u00e3o auxiliar para scanner de inje\u00e7\u00e3o de SQL avan\u00e7ada.

sqliplugin.name = Inje\u00e7\u00e3o de SQL avan\u00e7ada
sqliplugin.alert.name = Inje\u00e7\u00e3o de SQL avan\u00e7ada - {0}
sqliplugin.alert.desc = Uma inje\u00e7\u00e3o de SQL pode ser poss\u00edvel usando a carga anexada \u00e1 carga \u00fatil
sqliplugin.alert.soln = N\u00e3o confie na entrada do lado do cliente, mesmo se houver valida\u00e7\u00e3o do lado do cliente em vigor.\n\
Em geral, digite verificar todos os dados no lado do servidor.\n\
Se o aplicativo usar JDBC, use Declara\u00e7\u00e3o preparada ou Declara\u00e7\u00e3o exig\u00edvel, com par\u00e2metros passados \u200b\u200bpor '?'\n\
Se o aplicativo usa ASP, use objetos de comando ADO com verifica\u00e7\u00e3o de tipo forte e consultas parametrizadas.\n\
Se os procedimentos armazenados do banco de dados puderem ser usados, use-os.\n\
* N\u00e3o * concatene strings em consultas no procedimento armazenado ou use 'exec', 'exec imediato' ou funcionalidade equivalente\!\n\
N\u00e3o crie consultas SQL din\u00e2micas usando concatena\u00e7\u00e3o de string simples.\n\
Escape de todos os dados recebidos do cliente.\n\
Aplique uma 'lista de permiss\u00e3o' de caracteres permitidos ou uma 'lista de nega\u00e7\u00e3o' de caracteres n\u00e3o permitidos na entrada do usu\u00e1rio.\n\
Aplique o princ\u00edpio do menor privil\u00e9gio usando o usu\u00e1rio de banco de dados com o menor privil\u00e9gio poss\u00edvel.\n\
Em particular, evite usar os usu\u00e1rios do banco de dados 'sa' ou 'db-owner'. Isso n\u00e3o elimina a inje\u00e7\u00e3o de SQL, mas minimiza seu impacto.\n\
Conceda o m\u00ednimo de acesso ao banco de dados necess\u00e1rio para o aplicativo.
sqliplugin.alert.info.unionbased = Provavelmente o RDBMS [{0}], dado o fragmento de mensagem de erro espec\u00edfico do UNION para [{1}] colunas A vulnerabilidade foi detectada manipulando o par\u00e2metro com uma cl\u00e1usula SQL ''UNION'' para fazer com que uma mensagem de erro do banco de dados fosse retornada e reconhecida.
sqliplugin.alert.info.booleanbased = Os resultados da p\u00e1gina foram manipulados com \u00eaxito usando as condi\u00e7\u00f5es booleanas [{0}] e [{1}] O valor do par\u00e2metro que estava sendo modificado foi retirado da sa\u00edda HTML para os fins da compara\u00e7\u00e3o. Os dados foram retornados para o par\u00e2metro original. A vulnerabilidade foi detectada restringindo com sucesso os dados originalmente retornados, manipulando o par\u00e2metro.
sqliplugin.alert.info.errorbased = Provavelmente o RDBMS [{0}], dado o fragmento da mensagem de erro [{1}] nos resultados HTML. A vulnerabilidade foi detectada pela manipula\u00e7\u00e3o do par\u00e2metro para fazer com que uma mensagem de erro do banco de dados fosse retornada e reconhecida.
sqliplugin.alert.info.timebased = O tempo de consulta \u00e9 control\u00e1vel usando o valor do par\u00e2metro [{0}], o que faz com que a solicita\u00e7\u00e3o demore [{1}] milissegundos, quando a consulta original n\u00e3o modificada com o valor [{2}] leva em m\u00e9dia [{3}] milissegundos.
sqliplugin.alert.refs = https\://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html